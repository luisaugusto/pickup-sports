create type "public"."users_groups_roles" as enum ('admin', 'moderator', 'event_manager', 'member');

revoke delete on table "public"."profile" from "anon";

revoke insert on table "public"."profile" from "anon";

revoke references on table "public"."profile" from "anon";

revoke select on table "public"."profile" from "anon";

revoke trigger on table "public"."profile" from "anon";

revoke truncate on table "public"."profile" from "anon";

revoke update on table "public"."profile" from "anon";

revoke delete on table "public"."profile" from "authenticated";

revoke insert on table "public"."profile" from "authenticated";

revoke references on table "public"."profile" from "authenticated";

revoke select on table "public"."profile" from "authenticated";

revoke trigger on table "public"."profile" from "authenticated";

revoke truncate on table "public"."profile" from "authenticated";

revoke update on table "public"."profile" from "authenticated";

revoke delete on table "public"."profile" from "service_role";

revoke insert on table "public"."profile" from "service_role";

revoke references on table "public"."profile" from "service_role";

revoke select on table "public"."profile" from "service_role";

revoke trigger on table "public"."profile" from "service_role";

revoke truncate on table "public"."profile" from "service_role";

revoke update on table "public"."profile" from "service_role";

alter table "public"."profile" drop constraint "profile_pkey";

drop index if exists "public"."profile_pkey";

drop table "public"."profile";

create table "public"."events" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now(),
    "group_id" bigint not null,
    "host_id" uuid not null default auth.uid(),
    "creator_id" uuid not null default auth.uid(),
    "title" text not null,
    "description" text not null,
    "start_date" timestamp with time zone not null,
    "end_date" timestamp with time zone,
    "attendee_limit" smallint,
    "additional_attendee_limit" smallint not null default '0'::smallint,
    "location_id" bigint not null,
    "banner_url" text
);


alter table "public"."events" enable row level security;

create table "public"."locations" (
    "id" bigint generated by default as identity not null,
    "latitude" double precision not null,
    "longitude" double precision not null,
    "address" text not null,
    "city" text not null,
    "state" text not null,
    "postal_code" text not null,
    "description" text
);


alter table "public"."locations" enable row level security;

create table "public"."profiles" (
    "id" uuid not null default auth.uid(),
    "name" text not null,
    "avatar_url" text not null
);


alter table "public"."profiles" enable row level security;

create table "public"."users_events" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now(),
    "user_id" uuid not null,
    "event_id" bigint not null,
    "additional_attendees" smallint not null default '0'::smallint,
    "is_waitlisted" boolean not null,
    "is_attending" boolean not null
);


alter table "public"."users_events" enable row level security;

create table "public"."users_groups" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now(),
    "role" users_groups_roles not null,
    "group_id" bigint not null,
    "user_id" uuid not null default auth.uid(),
    "is_pending" boolean not null
);


alter table "public"."users_groups" enable row level security;

alter table "public"."groups" add column "location_id" bigint not null;

alter table "public"."groups" enable row level security;

CREATE UNIQUE INDEX events_id_key ON public.events USING btree (id);

CREATE UNIQUE INDEX events_location_id_key ON public.events USING btree (location_id);

CREATE UNIQUE INDEX events_pkey ON public.events USING btree (id);

CREATE UNIQUE INDEX locations_id_key ON public.locations USING btree (id);

CREATE UNIQUE INDEX locations_pkey ON public.locations USING btree (id);

CREATE UNIQUE INDEX profile_id_key ON public.profiles USING btree (id);

CREATE UNIQUE INDEX users_events_id_key ON public.users_events USING btree (id);

CREATE UNIQUE INDEX users_events_pkey ON public.users_events USING btree (id);

CREATE UNIQUE INDEX users_groups_pkey ON public.users_groups USING btree (id);

CREATE UNIQUE INDEX profile_pkey ON public.profiles USING btree (id);

alter table "public"."events" add constraint "events_pkey" PRIMARY KEY using index "events_pkey";

alter table "public"."locations" add constraint "locations_pkey" PRIMARY KEY using index "locations_pkey";

alter table "public"."profiles" add constraint "profile_pkey" PRIMARY KEY using index "profile_pkey";

alter table "public"."users_events" add constraint "users_events_pkey" PRIMARY KEY using index "users_events_pkey";

alter table "public"."users_groups" add constraint "users_groups_pkey" PRIMARY KEY using index "users_groups_pkey";

alter table "public"."events" add constraint "events_id_key" UNIQUE using index "events_id_key";

alter table "public"."events" add constraint "events_location_id_key" UNIQUE using index "events_location_id_key";

alter table "public"."events" add constraint "public_events_creator_id_fkey" FOREIGN KEY (creator_id) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."events" validate constraint "public_events_creator_id_fkey";

alter table "public"."events" add constraint "public_events_group_id_fkey" FOREIGN KEY (group_id) REFERENCES groups(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."events" validate constraint "public_events_group_id_fkey";

alter table "public"."events" add constraint "public_events_host_id_fkey" FOREIGN KEY (host_id) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE SET DEFAULT not valid;

alter table "public"."events" validate constraint "public_events_host_id_fkey";

alter table "public"."events" add constraint "public_events_location_id_fkey" FOREIGN KEY (location_id) REFERENCES locations(id) ON UPDATE CASCADE not valid;

alter table "public"."events" validate constraint "public_events_location_id_fkey";

alter table "public"."groups" add constraint "public_groups_location_id_fkey" FOREIGN KEY (location_id) REFERENCES locations(id) ON UPDATE CASCADE not valid;

alter table "public"."groups" validate constraint "public_groups_location_id_fkey";

alter table "public"."locations" add constraint "locations_id_key" UNIQUE using index "locations_id_key";

alter table "public"."profiles" add constraint "profile_id_key" UNIQUE using index "profile_id_key";

alter table "public"."users_events" add constraint "public_users_events_event_id_fkey" FOREIGN KEY (event_id) REFERENCES events(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."users_events" validate constraint "public_users_events_event_id_fkey";

alter table "public"."users_events" add constraint "public_users_events_user_id_fkey" FOREIGN KEY (user_id) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."users_events" validate constraint "public_users_events_user_id_fkey";

alter table "public"."users_events" add constraint "users_events_id_key" UNIQUE using index "users_events_id_key";

alter table "public"."users_groups" add constraint "public_users_groups_group_id_fkey" FOREIGN KEY (group_id) REFERENCES groups(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."users_groups" validate constraint "public_users_groups_group_id_fkey";

alter table "public"."users_groups" add constraint "public_users_groups_user_id_fkey" FOREIGN KEY (user_id) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."users_groups" validate constraint "public_users_groups_user_id_fkey";

grant delete on table "public"."events" to "anon";

grant insert on table "public"."events" to "anon";

grant references on table "public"."events" to "anon";

grant select on table "public"."events" to "anon";

grant trigger on table "public"."events" to "anon";

grant truncate on table "public"."events" to "anon";

grant update on table "public"."events" to "anon";

grant delete on table "public"."events" to "authenticated";

grant insert on table "public"."events" to "authenticated";

grant references on table "public"."events" to "authenticated";

grant select on table "public"."events" to "authenticated";

grant trigger on table "public"."events" to "authenticated";

grant truncate on table "public"."events" to "authenticated";

grant update on table "public"."events" to "authenticated";

grant delete on table "public"."events" to "service_role";

grant insert on table "public"."events" to "service_role";

grant references on table "public"."events" to "service_role";

grant select on table "public"."events" to "service_role";

grant trigger on table "public"."events" to "service_role";

grant truncate on table "public"."events" to "service_role";

grant update on table "public"."events" to "service_role";

grant delete on table "public"."locations" to "anon";

grant insert on table "public"."locations" to "anon";

grant references on table "public"."locations" to "anon";

grant select on table "public"."locations" to "anon";

grant trigger on table "public"."locations" to "anon";

grant truncate on table "public"."locations" to "anon";

grant update on table "public"."locations" to "anon";

grant delete on table "public"."locations" to "authenticated";

grant insert on table "public"."locations" to "authenticated";

grant references on table "public"."locations" to "authenticated";

grant select on table "public"."locations" to "authenticated";

grant trigger on table "public"."locations" to "authenticated";

grant truncate on table "public"."locations" to "authenticated";

grant update on table "public"."locations" to "authenticated";

grant delete on table "public"."locations" to "service_role";

grant insert on table "public"."locations" to "service_role";

grant references on table "public"."locations" to "service_role";

grant select on table "public"."locations" to "service_role";

grant trigger on table "public"."locations" to "service_role";

grant truncate on table "public"."locations" to "service_role";

grant update on table "public"."locations" to "service_role";

grant delete on table "public"."profiles" to "anon";

grant insert on table "public"."profiles" to "anon";

grant references on table "public"."profiles" to "anon";

grant select on table "public"."profiles" to "anon";

grant trigger on table "public"."profiles" to "anon";

grant truncate on table "public"."profiles" to "anon";

grant update on table "public"."profiles" to "anon";

grant delete on table "public"."profiles" to "authenticated";

grant insert on table "public"."profiles" to "authenticated";

grant references on table "public"."profiles" to "authenticated";

grant select on table "public"."profiles" to "authenticated";

grant trigger on table "public"."profiles" to "authenticated";

grant truncate on table "public"."profiles" to "authenticated";

grant update on table "public"."profiles" to "authenticated";

grant delete on table "public"."profiles" to "service_role";

grant insert on table "public"."profiles" to "service_role";

grant references on table "public"."profiles" to "service_role";

grant select on table "public"."profiles" to "service_role";

grant trigger on table "public"."profiles" to "service_role";

grant truncate on table "public"."profiles" to "service_role";

grant update on table "public"."profiles" to "service_role";

grant delete on table "public"."users_events" to "anon";

grant insert on table "public"."users_events" to "anon";

grant references on table "public"."users_events" to "anon";

grant select on table "public"."users_events" to "anon";

grant trigger on table "public"."users_events" to "anon";

grant truncate on table "public"."users_events" to "anon";

grant update on table "public"."users_events" to "anon";

grant delete on table "public"."users_events" to "authenticated";

grant insert on table "public"."users_events" to "authenticated";

grant references on table "public"."users_events" to "authenticated";

grant select on table "public"."users_events" to "authenticated";

grant trigger on table "public"."users_events" to "authenticated";

grant truncate on table "public"."users_events" to "authenticated";

grant update on table "public"."users_events" to "authenticated";

grant delete on table "public"."users_events" to "service_role";

grant insert on table "public"."users_events" to "service_role";

grant references on table "public"."users_events" to "service_role";

grant select on table "public"."users_events" to "service_role";

grant trigger on table "public"."users_events" to "service_role";

grant truncate on table "public"."users_events" to "service_role";

grant update on table "public"."users_events" to "service_role";

grant delete on table "public"."users_groups" to "anon";

grant insert on table "public"."users_groups" to "anon";

grant references on table "public"."users_groups" to "anon";

grant select on table "public"."users_groups" to "anon";

grant trigger on table "public"."users_groups" to "anon";

grant truncate on table "public"."users_groups" to "anon";

grant update on table "public"."users_groups" to "anon";

grant delete on table "public"."users_groups" to "authenticated";

grant insert on table "public"."users_groups" to "authenticated";

grant references on table "public"."users_groups" to "authenticated";

grant select on table "public"."users_groups" to "authenticated";

grant trigger on table "public"."users_groups" to "authenticated";

grant truncate on table "public"."users_groups" to "authenticated";

grant update on table "public"."users_groups" to "authenticated";

grant delete on table "public"."users_groups" to "service_role";

grant insert on table "public"."users_groups" to "service_role";

grant references on table "public"."users_groups" to "service_role";

grant select on table "public"."users_groups" to "service_role";

grant trigger on table "public"."users_groups" to "service_role";

grant truncate on table "public"."users_groups" to "service_role";

grant update on table "public"."users_groups" to "service_role";

create policy "Allow insert if id matches auth id."
on "public"."profiles"
as permissive
for insert
to public
with check ((id = auth.uid()));


create policy "Allow users to delete their own profile."
on "public"."profiles"
as permissive
for delete
to public
using ((id = auth.uid()));


create policy "Allow users to update their own profile."
on "public"."profiles"
as permissive
for update
to public
using ((id = auth.uid()));


create policy "Enable read access for all users"
on "public"."profiles"
as permissive
for select
to public
using (true);


create policy "delete_admin"
on "public"."users_groups"
as permissive
for delete
to public
using (((user_id = auth.uid()) AND (role <> 'admin'::users_groups_roles)));


create policy "delete_moderator"
on "public"."users_groups"
as permissive
for delete
to public
using (((role = ANY (ARRAY['member'::users_groups_roles, 'event_manager'::users_groups_roles])) AND (EXISTS ( SELECT 1
   FROM users_groups ug
  WHERE ((ug.group_id = ug.group_id) AND (ug.user_id = auth.uid()) AND (ug.role = 'moderator'::users_groups_roles))))));


create policy "delete_self"
on "public"."users_groups"
as permissive
for delete
to public
using (((user_id = auth.uid()) AND (role <> 'admin'::users_groups_roles)));


create policy "insert_self"
on "public"."users_groups"
as permissive
for insert
to public
with check (((user_id = auth.uid()) AND (role = 'member'::users_groups_roles)));


create policy "select_admin_moderators"
on "public"."users_groups"
as permissive
for select
to public
using ((EXISTS ( SELECT 1
   FROM users_groups ug
  WHERE ((ug.user_id = auth.uid()) AND (ug.group_id = users_groups.group_id) AND (ug.role = ANY (ARRAY['admin'::users_groups_roles, 'moderator'::users_groups_roles]))))));


create policy "select_public"
on "public"."users_groups"
as permissive
for select
to public
using ((is_pending = false));


create policy "update_admin"
on "public"."users_groups"
as permissive
for update
to public
using (((EXISTS ( SELECT 1
   FROM users_groups ug
  WHERE ((ug.group_id = ug.group_id) AND (ug.user_id = auth.uid()) AND (ug.role = 'admin'::users_groups_roles)))) AND (role <> 'admin'::users_groups_roles)));


create policy "update_moderator"
on "public"."users_groups"
as permissive
for update
to public
using ((EXISTS ( SELECT 1
   FROM users_groups ug
  WHERE ((ug.group_id = users_groups.group_id) AND (ug.user_id = auth.uid()) AND (ug.role = 'moderator'::users_groups_roles)))))
with check ((role = ANY (ARRAY['event_manager'::users_groups_roles, 'member'::users_groups_roles])));



